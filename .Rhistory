## Put comments here that give an overall description of what your
## The function looks to take the inverse of a matrix. If the inverse has already
## been taken, it will pull the cached matrix.
## This will make a matrix.
makematrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
matrixinverse <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
matrixinverse = matrixinverse,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cachematrix <- function(x, ...) {
m <- x$matrixinverse()
if(!is.null(m)) {
message("Get cached")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$matrixinverse(m)
m
## Return a matrix that is the inverse of 'x'
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m = getmatrix(x)
m$get
m = makematrix
m$get()
m=getmatrix()
m=makematrix()
m$get()
## Put comments here that give an overall description of what your
## The function looks to take the inverse of a matrix. If the inverse has already
## been taken, it will pull the cached matrix.
## This will make a matrix.
makematrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getmatrix <- function() m
list(set = set, get = get,
setinverse = setinverse,
getmatrix = getmatrix)
}
## The folling matrix will see if the matrix inverse
## has already been computed. If it has, then it will
## return that value. If not, it will compute the inverse
## and set a cachaved value.
cachematrix <- function(x, ...) {
m <- x$getinverse()
if(!is.null(m)) {
message("Get cached")
return(m)
}
data <- x$get()
m <- solve(data)
x$getinverse(m)
m
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = cachematrix(x)
m = makematrix(x)
m$get()
cachematrix(m)
